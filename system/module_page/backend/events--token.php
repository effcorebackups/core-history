<?php

  ##################################################################
  ### Copyright © 2017—2021 Maxim Rysevets. All rights reserved. ###
  ##################################################################

namespace effcore\modules\page {
          use \effcore\color;
          use \effcore\color_preset;
          use \effcore\module;
          use \effcore\page;
          use \effcore\url;
          abstract class events_token {

  static function on_apply($name, $args = []) {
    $settings = module::settings_get('page');
    switch ($name) {
      case 'thumbnail_small_width':  return $settings->thumbnail_small_width;
      case 'thumbnail_middle_width': return $settings->thumbnail_middle_width;
      case 'thumbnail_big_width':    return $settings->thumbnail_big_width;
      case 'page_min_width':         return $settings->page_min_width;
      case 'page_max_width':         return $settings->page_max_width;
      case 'css_page_min_width_context':
      case 'css_page_max_width_context':
        $page_id = url::get_current()->query_arg_select('page_id');
        $page = is_string($page_id) ? page::get($page_id) : null;
        if ($name === 'css_page_min_width_context' && !empty($page->data['width_min'])) return 'min-width: '.$page->data['width_min'].'px /* induvidual page size */';
        if ($name === 'css_page_max_width_context' && !empty($page->data['width_max'])) return 'max-width: '.$page->data['width_max'].'px /* induvidual page size */';
        break;
    }
  # colors
    if (substr($name, 0, 6) === 'color_') {
      $colors = color::get_all();
      $is_all_colors_available = color_preset::is_all_colors_available();
      switch ($name) {
        case 'color_page'                  : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_page_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_text'                  : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_text_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_main'                  : if (!$is_all_colors_available) return 'gray';       /**/  $color = $colors[$settings->color_main_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_link'                  : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_link_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_link_active'           : if (!$is_all_colors_available) return 'orange';     /**/  $color = $colors[$settings->color_link_active_id           ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_table_row_odd'         : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_table_row_odd_id         ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_table_row_even'        : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_table_row_even_id        ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_relation'              : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_relation_id              ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_menu'                  : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_menu_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_menu_active'           : if (!$is_all_colors_available) return 'gray';       /**/  $color = $colors[$settings->color_menu_active_id           ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_menu_text'             : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_menu_text_id             ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_menu_link'             : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_menu_link_id             ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_menu_link_active'      : if (!$is_all_colors_available) return 'orange';     /**/  $color = $colors[$settings->color_menu_link_active_id      ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_tabs'                  : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_tabs_id                  ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_tabs_link'             : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_tabs_link_id             ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_tabs_link_active'      : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_tabs_link_active_id      ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_tabs_link_active_no_bg': if (!$is_all_colors_available) return 'orange';     /**/  $color = $colors[$settings->color_tabs_link_active_no_bg_id];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_ok'                    : if (!$is_all_colors_available) return 'green';      /**/  $color = $colors[$settings->color_ok_id                    ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_warning'               : if (!$is_all_colors_available) return 'orange';     /**/  $color = $colors[$settings->color_warning_id               ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_error'                 : if (!$is_all_colors_available) return 'red';        /**/  $color = $colors[$settings->color_error_id                 ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_fieldset'              : if (!$is_all_colors_available) return 'lightgray';  /**/  $color = $colors[$settings->color_fieldset_id              ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_fieldset_nested'       : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_fieldset_nested_id       ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_field'                 : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_field_id                 ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_field_text'            : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_field_text_id            ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_button'                : if (!$is_all_colors_available) return 'black';      /**/  $color = $colors[$settings->color_button_id                ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_button_active'         : if (!$is_all_colors_available) return 'gray';       /**/  $color = $colors[$settings->color_button_active_id         ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
        case 'color_button_text'           : if (!$is_all_colors_available) return 'white';      /**/  $color = $colors[$settings->color_button_text_id           ];  /* when count($args) === 0 */  if (!empty($color->value) && count($args) === 0) return $color->value;  /* when count($args) === 3 */  if (!empty($color->value) && count($args) === 3) return $color->filter_shift($args[0], $args[1], $args[2]);  /* when count($args) === 4 */  if (!empty($color->value) && count($args) === 4) return $color->filter_shift($args[0], $args[1], $args[2], $args[3], color::return_rgba);
      }
    }
  }

}}